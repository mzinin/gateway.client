// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Instrument struct {
	_tab flatbuffers.Table
}

func GetRootAsInstrument(buf []byte, offset flatbuffers.UOffsetT) *Instrument {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Instrument{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsInstrument(buf []byte, offset flatbuffers.UOffsetT) *Instrument {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Instrument{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Instrument) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Instrument) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Instrument) Int0() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Instrument) MutateInt0(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Instrument) Int1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Instrument) MutateInt1(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Instrument) Int2() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Instrument) MutateInt2(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Instrument) Int3() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Instrument) MutateInt3(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Instrument) Int4() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Instrument) MutateInt4(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Instrument) Int5() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Instrument) MutateInt5(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *Instrument) Double0() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Instrument) MutateDouble0(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func (rcv *Instrument) Double1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Instrument) MutateDouble1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

func (rcv *Instrument) Double2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Instrument) MutateDouble2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

func (rcv *Instrument) Double3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Instrument) MutateDouble3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

func (rcv *Instrument) Double4() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Instrument) MutateDouble4(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

func (rcv *Instrument) Double5() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Instrument) MutateDouble5(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

func (rcv *Instrument) Str0() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str6() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str7() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str8() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str9() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str10() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str11() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str12() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str13() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str14() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str15() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str16() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str17() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str18() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str19() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str20() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str21() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str22() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str23() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str24() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str25() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str26() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str27() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str28() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str29() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str30() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Instrument) Str31() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func InstrumentStart(builder *flatbuffers.Builder) {
	builder.StartObject(44)
}
func InstrumentAddInt0(builder *flatbuffers.Builder, int0 int64) {
	builder.PrependInt64Slot(0, int0, 0)
}
func InstrumentAddInt1(builder *flatbuffers.Builder, int1 int64) {
	builder.PrependInt64Slot(1, int1, 0)
}
func InstrumentAddInt2(builder *flatbuffers.Builder, int2 int64) {
	builder.PrependInt64Slot(2, int2, 0)
}
func InstrumentAddInt3(builder *flatbuffers.Builder, int3 int64) {
	builder.PrependInt64Slot(3, int3, 0)
}
func InstrumentAddInt4(builder *flatbuffers.Builder, int4 int64) {
	builder.PrependInt64Slot(4, int4, 0)
}
func InstrumentAddInt5(builder *flatbuffers.Builder, int5 int64) {
	builder.PrependInt64Slot(5, int5, 0)
}
func InstrumentAddDouble0(builder *flatbuffers.Builder, double0 float64) {
	builder.PrependFloat64Slot(6, double0, 0.0)
}
func InstrumentAddDouble1(builder *flatbuffers.Builder, double1 float64) {
	builder.PrependFloat64Slot(7, double1, 0.0)
}
func InstrumentAddDouble2(builder *flatbuffers.Builder, double2 float64) {
	builder.PrependFloat64Slot(8, double2, 0.0)
}
func InstrumentAddDouble3(builder *flatbuffers.Builder, double3 float64) {
	builder.PrependFloat64Slot(9, double3, 0.0)
}
func InstrumentAddDouble4(builder *flatbuffers.Builder, double4 float64) {
	builder.PrependFloat64Slot(10, double4, 0.0)
}
func InstrumentAddDouble5(builder *flatbuffers.Builder, double5 float64) {
	builder.PrependFloat64Slot(11, double5, 0.0)
}
func InstrumentAddStr0(builder *flatbuffers.Builder, str0 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(str0), 0)
}
func InstrumentAddStr1(builder *flatbuffers.Builder, str1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(str1), 0)
}
func InstrumentAddStr2(builder *flatbuffers.Builder, str2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(str2), 0)
}
func InstrumentAddStr3(builder *flatbuffers.Builder, str3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(str3), 0)
}
func InstrumentAddStr4(builder *flatbuffers.Builder, str4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(str4), 0)
}
func InstrumentAddStr5(builder *flatbuffers.Builder, str5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(str5), 0)
}
func InstrumentAddStr6(builder *flatbuffers.Builder, str6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(str6), 0)
}
func InstrumentAddStr7(builder *flatbuffers.Builder, str7 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(str7), 0)
}
func InstrumentAddStr8(builder *flatbuffers.Builder, str8 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(str8), 0)
}
func InstrumentAddStr9(builder *flatbuffers.Builder, str9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(str9), 0)
}
func InstrumentAddStr10(builder *flatbuffers.Builder, str10 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(str10), 0)
}
func InstrumentAddStr11(builder *flatbuffers.Builder, str11 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(str11), 0)
}
func InstrumentAddStr12(builder *flatbuffers.Builder, str12 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(str12), 0)
}
func InstrumentAddStr13(builder *flatbuffers.Builder, str13 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(str13), 0)
}
func InstrumentAddStr14(builder *flatbuffers.Builder, str14 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(str14), 0)
}
func InstrumentAddStr15(builder *flatbuffers.Builder, str15 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(str15), 0)
}
func InstrumentAddStr16(builder *flatbuffers.Builder, str16 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(str16), 0)
}
func InstrumentAddStr17(builder *flatbuffers.Builder, str17 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(str17), 0)
}
func InstrumentAddStr18(builder *flatbuffers.Builder, str18 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(str18), 0)
}
func InstrumentAddStr19(builder *flatbuffers.Builder, str19 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(str19), 0)
}
func InstrumentAddStr20(builder *flatbuffers.Builder, str20 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(str20), 0)
}
func InstrumentAddStr21(builder *flatbuffers.Builder, str21 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(str21), 0)
}
func InstrumentAddStr22(builder *flatbuffers.Builder, str22 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(str22), 0)
}
func InstrumentAddStr23(builder *flatbuffers.Builder, str23 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(str23), 0)
}
func InstrumentAddStr24(builder *flatbuffers.Builder, str24 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(str24), 0)
}
func InstrumentAddStr25(builder *flatbuffers.Builder, str25 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(str25), 0)
}
func InstrumentAddStr26(builder *flatbuffers.Builder, str26 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(str26), 0)
}
func InstrumentAddStr27(builder *flatbuffers.Builder, str27 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(str27), 0)
}
func InstrumentAddStr28(builder *flatbuffers.Builder, str28 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(str28), 0)
}
func InstrumentAddStr29(builder *flatbuffers.Builder, str29 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(str29), 0)
}
func InstrumentAddStr30(builder *flatbuffers.Builder, str30 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(str30), 0)
}
func InstrumentAddStr31(builder *flatbuffers.Builder, str31 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(str31), 0)
}
func InstrumentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
